#!/usr/bin/env python
from __future__ import unicode_literals
import argparse
import glob
import logging
import os
import re
import shlex
import subprocess
import sys
import tempfile
import urllib
import json
from collections import OrderedDict

import balanced
import mako.exceptions
from mako.template import Template
from mako.lookup import TemplateLookup

from _utils import (
    EnvDefault,
    default_json_serializer,
    recursive_expand, cd_to_path,
    routify,
)


logger = logging.getLogger(__name__)

ROOT_PATH = os.path.dirname(os.path.abspath(__file__))
DOCKERS_PATH = os.path.join(ROOT_PATH, '..')


@cd_to_path
def bootstrap_php(path):
    if not os.path.exists('composer.phar'):
        logger.info('Installing composer since it was not found')
        # download composer
        download = subprocess.Popen(
            ['curl', '-s', 'https://getcomposer.org/installer'],
            stdout=subprocess.PIPE,
        )
        php_cli = subprocess.Popen(
            ['/usr/bin/env', 'php'],
            stdin=download.stdout,
            stdout=subprocess.PIPE
        )
        download.stdout.close()
        output = php_cli.communicate()[0]
        logger.info(output)
        # composer downloaded and ready to rock.
        # writing the requirements
        with open('composer.json', 'w+') as f:
            requirements = {
                'require': {
                    'balanced/balanced': '*',
                },
            }
            json.dump(requirements, f)
        installed = subprocess.check_output(
            ['/usr/bin/env', 'php', 'composer.phar', 'install'],
        )
        logger.info(installed)


def bootstrap_python(path):
    pass


def bootstrap_ruby(path):
    pass


class Context(object):

    BOOTSTRAPPERS = {
        'php': bootstrap_php,
        'python': bootstrap_python,
        'ruby': bootstrap_ruby,
    }

    def __init__(self, scenarios, storage):
        self.scenarios_path = scenarios
        self.template_lookup = TemplateLookup(directories=[scenarios])
        self.storage = Storage(storage)
        path = tempfile.gettempdir()
        for lang in ['php', 'python', 'ruby']:
            workspace = os.path.join(path, 'dockers-' + lang)
            if not os.path.isdir(workspace):
                logger.debug('creating workspace %s', workspace)
                os.makedirs(workspace)
            setattr(self, lang + '_workspace', workspace)
            self.BOOTSTRAPPERS[lang](workspace)

    def __enter__(self):
        # ugh.
        self.storage.ctx = self
        return self

    def __exit__(self, type, value, traceback):
        self.storage.save()


class Storage(dict):

    ctx = None

    def __init__(self, filename):
        super(Storage, self).__init__()
        self.filename = filename
        self.load()

    def load(self):
        try:
            with open(self.filename, 'r') as f:
                self.update(json.load(f))
        except IOError, ex:
            print >> sys.stderr, ex
        self.filename = self.filename

    def save(self):
        with open(self.filename, 'w') as f:
            json.dump(self, f, sort_keys=True, indent=4,
                      default=default_json_serializer)

    def __missing__(self, name):
        templates = _glob_templates(self.ctx.scenarios_path, name)

        # run em
        for fn in templates:

            try:
                scenario, block = _render_template(self.ctx, name, fn)
            except ScenarioDisabled:
                logger.debug('skipping scenario %s:%s', name, fn)
                continue

            if scenario.executed and scenario.response:
                logger.info('storing scenario %s:%s response', name, fn)
                self.ctx.storage[name] = block

        # it better have executed!
        return self.ctx.storage[name]


class ScenarioDisabled(Exception):
    pass


class _Endpoint(object):

    class _EndpointPath(object):

        def __init__(self, path):
            self.path = path

        def format(self, **kwargs):
            # this basically parses :bank_account_id to a string with
            # {bank_account_id} for much easier interpolation.
            # note that it shouldn't start with a digit!
            _uri = re.sub('(:([^\d]\w+))+', r'{\2}', self.path)
            return _uri.format(**kwargs)

        def __add__(self, other):
            return unicode(self) + other

        def __radd__(self, other):
            return other + unicode(self)

        def __str__(self):
            return unicode(self)

        def __unicode__(self):
            return self.path

        def __repr__(self):
            return unicode(self)

    def __init__(self, render_context, endpoint_name):
        self.ctx = render_context
        self.endpoint_route = endpoint_name
        self.method, path = routify(endpoint_name)
        self.path = self._EndpointPath(path)

    @property
    def full_url(self):
        return self._EndpointPath(self.qualified_url_for(self.path))

    @property
    def routes(self):
        for r in routify(self.endpoint_route, all_endpoints=True):
            yield r

    def qualified_url_for(self, uri, **q):
        q = q or {}
        url = self.ctx['api_location'] + uri
        if q:
            url += '?' + urllib.urlencode(q)
        return url

    def force_shortest_url_path(self):
        return self.force_path(comparator=min)

    def force_path(self, key=None, comparator=max):
        key = key or (lambda r: len(r[1]))
        self.method, path = comparator(self.routes, key=key)
        self.path = self._EndpointPath(path)
        return self


class Scenario(object):

    DISABLED_LANGUAGES = []
    EXECUTION_FILTERS = []

    def __init__(self, ctx, name, filename):
        self.ctx = ctx
        self.name = name
        self.filename = filename
        self.executed = False
        self.definition = None
        self.request = None
        self.response = None

    @property
    def path(self):
        return os.path.dirname(self.filename)

    @property
    def lang(self):
        lang, _ = os.path.splitext(os.path.basename(self.filename))
        return lang

    def __call__(self):
        if self.lang in self.DISABLED_LANGUAGES:
            raise ScenarioDisabled('scenario %s is disabled' % self.name)

        context = {
            'api_location': self.ctx.storage['api_location'],
            'api_key': self.ctx.storage['api_key'],
            'marketplace_guid': self.ctx.storage['marketplace_guid'],
            'marketplace': self.ctx.storage['marketplace'],
            'Endpoint': _Endpoint,
            'recursive_expand': recursive_expand,
        }

        self.definition = self._render(context)
        context['request'] = self._load_metadata()
        if 'payload' in context['request']:
            context['payload'] = context['request']['payload']

        self.request = self._render(context)

        for should_not_execute in self.EXECUTION_FILTERS:
            if should_not_execute(self):
                logger.info('skipping execution of scenario %s:%s',
                            self.name, self.filename)
                break
        else:
            logger.info('executing scenario %s:%s', self.name, self.filename)
            self.response = self._execute()

        return self

    def _render(self, context):
        template = Template(
            filename=self.filename, lookup=self.ctx.template_lookup)
        try:
            return template.render(**context).strip()
        except Exception:
            print mako.exceptions.text_error_template().render()
            raise

    def _load_metadata(self):
        context = {
            'json': json,
            'storage': self.ctx.storage,
        }
        metadata = os.path.join(os.path.dirname(self.filename), 'metadata.py')
        execfile(metadata, context, context)
        return context['request']

    def _execute(self):
        prepare = {
            'curl': prepare_curl,
            'php': prepare_php,
            'python': prepare_python,
            'ruby': prepare_ruby,
        }.get(self.lang, None)
        if not prepare:
            raise Exception(
                '"{}" execution is not supported'.format(self.lang)
            )
        args, env = prepare(self.ctx, self.request, self.name)
        output = subprocess.check_output(args, env=env).strip()
        if output:
            output = json.dumps(
                json.loads(output), indent=4, sort_keys=True)

        self.executed = not self.executed
        return output


def prepare_curl(_ctx, script, _name):
    args = shlex.split(script.encode('utf-8'))
    args = [a for a in args if a != '\n']
    return args, {}


def prepare_ruby(ctx, script, name):
    file_path = os.path.join(ctx.ruby_workspace, name)
    with open(file_path, 'w') as fo:
        lib_path = os.path.join(DOCKERS_PATH, 'balanced-ruby', 'lib')
        fo.write('$:.unshift("{}")\n'.format(lib_path))
        fo.write(script.encode('utf-8'))
    args = ['ruby', file_path]
    return args, os.environ


def prepare_php(ctx, script, name):
    file_path = os.path.join(ctx.php_workspace, name)
    with open(file_path, 'w') as fo:
        fo.write(script)
    args = ['php', file_path]
    return args, {}


def prepare_python(ctx, script, name):
    file_path = os.path.join(ctx.python_workspace, name)
    with open(file_path, 'w') as fo:
        fo.write(script)
    args = [sys.executable, file_path]
    return args, {}


def to_block(scenario):
    pygment = {
        'curl': 'bash',
    }.get(scenario.lang, scenario.lang)

    block = OrderedDict()
    block['definition'] = {
        'type': pygment,
        'content': scenario.definition,
    }
    block['request'] = {
        'type': pygment,
        'content': scenario.request,
    }
    if scenario.response:
        block['response'] = {
            'type': 'javascript',
            'content': scenario.response,
        }
    return block


def bootstrap(api_location, storage):
    # api key
    balanced.config.root_uri = api_location
    key = balanced.APIKey().save()
    api_key = key.secret
    balanced.configure(api_key)

    # marketplace
    marketplace = balanced.Marketplace().save()

    storage['api_location'] = api_location
    storage['api_key'] = api_key
    storage['marketplace_guid'] = marketplace.id
    # If I don't do a __dict__ here, I get a
    #   TypeError: 'Marketplace' object is not subscriptable
    storage['marketplace'] = marketplace.__dict__


# main

def create_arg_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('scenarios', nargs='+')
    parser.add_argument(
        '--execute-lang', default='curl',
        choices=['curl', 'php', 'python', 'ruby'])
    parser.add_argument(
        '--disable-lang', action='append', default=[],
        dest='disable_langs', choices=['php', 'python', 'ruby'])
    parser.add_argument(
        '--api-location',
        action=EnvDefault,
        env_var='DCODE_API_LOC',
        default='https://api.balancedpayments.com',
    )
    parser.add_argument(
        '--execute-delete',
        action='store_true',
        help='Will execute the delete scenarios',
        default=False
    )
    parser.add_argument(
        '-l', '--log-level', choices=['debug', 'info', 'warn', 'error'],
        default='warn')
    parser.add_argument(
        '-s', '--storage', metavar='FILE', default='cache.json',
        help='Storage FILE location')
    parser.add_argument(
        '-d', '--directory', metavar='DIRECTORY', default='.',
        help='DIRECTORY containing named scenarios')
    return parser


def conf_logging(args):
    logger = logging.getLogger()
    formatter = logging.Formatter(
        '%(asctime)s : %(process)d : %(name)s : %(message)s')
    handler = logging.StreamHandler(sys.stderr)
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    logger.setLevel(getattr(logging, args.log_level.upper()))


def main():
    # command line
    arg_parser = create_arg_parser()
    args = arg_parser.parse_args()
    # logging
    conf_logging(args)
    with Context(args.directory, args.storage) as ctx:
        # bootstrap
        bootstrap_needed = False
        if ctx.storage.get('api_location', '') != args.api_location:
            logger.info(
                'api location %s !=  %s',
                args.api_location,
                ctx.storage.get('api_location')
            )
            ctx.storage.clear()
        for k in ['api_location', 'api_key', 'marketplace_guid']:
            if k not in ctx.storage:
                bootstrap_needed = True
                break
        else:
            balanced.config.root_uri = ctx.storage['api_location']
            balanced.configure(ctx.storage['api_key'])
            try:
                balanced.Marketplace.query.one()
            except balanced.exc.NoResultFound:
                bootstrap_needed = True

        if bootstrap_needed:
            bootstrap(args.api_location, ctx.storage)

        marketplace = balanced.Marketplace.my_marketplace

        # escrow
        ESCROW_THRESHOLD = 10 ** 5
        ESCROW_INCREMENT = 10 ** 4
        if marketplace.in_escrow < ESCROW_THRESHOLD:
            logger.info('marketplace escrow %s < threshold %s',
                        marketplace.in_escrow, ESCROW_THRESHOLD)
            card = marketplace.create_card('Someone', '4' + '1' * 15, 12, 2015)
            buyer = marketplace.create_buyer(None, card.uri)
            while ESCROW_THRESHOLD > 0:
                logger.info('marketplace debiting %s', ESCROW_INCREMENT)
                buyer.debit(ESCROW_INCREMENT)
                ESCROW_THRESHOLD -= ESCROW_INCREMENT

        # We configure these as class settings because we're going to re-use
        # the configured Scenario class by lazy evaluating dependent
        # scenarios during run-time, so we must preserve some kind of global
        # state.

        # do not execute delete filters
        Scenario.EXECUTION_FILTERS.append(
            lambda s: 'delete' in s.name and not args.execute_delete
        )
        # do not execute if the language isn't the desired execute_lang or
        # curl (because we depend on it for everything)
        Scenario.EXECUTION_FILTERS.append(
            lambda s: s.lang not in [args.execute_lang, 'curl']
        )
        # self explanatory, disable scenarios for all these languages
        # will throw a ScenarioDisabled exception
        Scenario.DISABLED_LANGUAGES.extend(args.disable_langs)

        # scenarios
        blocks = []
        for name in args.scenarios:
            templates = _glob_templates(ctx.scenarios_path, name)
            # run em
            for fn in templates:
                try:
                    scenario, block = _render_template(ctx, name, fn)
                except ScenarioDisabled:
                    logger.debug('skipping scenario %s:%s', name, fn)
                    continue
                if scenario.executed and scenario.response:
                    logger.info('storing scenario %s:%s response', name, fn)
                    ctx.storage[name] = block
                blocks.append(block)

    # the results!
    print json.dumps(blocks, indent=4, sort_keys=True)


def _glob_templates(root_scenario_path, name):
    name = name.replace('-', '_')
    scenario_path = os.path.join(root_scenario_path, name)
    if not os.path.isdir(scenario_path):
        raise Exception(
            'Scenario not found @ {}'.format(scenario_path)
        )

    # glob em
    template_glob = os.path.join(scenario_path, '[!_]*.mako')
    templates = glob.glob(template_glob)
    logger.info('globbed %d templates from %s',
                len(templates), template_glob)
    return templates


def _render_template(ctx, name, fn):
    logger.info('scenario %s:%s', name, fn)
    scenario = Scenario(ctx, name, fn)
    executed_scenario = scenario()
    block = to_block(executed_scenario)
    return executed_scenario, block


if __name__ == '__main__':
    main()
